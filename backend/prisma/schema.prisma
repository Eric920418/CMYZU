generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js 需要的模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // 可選，支援密碼登入
  role          Role      @default(STUDENT)
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  slug        String    @unique
  featured    Boolean   @default(false)
  published   Boolean   @default(false)
  publishedAt DateTime?
  authorId    String
  categoryId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author   User      @relation(fields: [authorId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  tags     PostTag[]

  @@map("posts")
}

model Category {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  description String?
  order       Int    @default(0)
  active      Boolean @default(true)

  posts Post[]

  @@map("categories")
}

model Tag {
  id    String @id @default(cuid())
  name  String
  slug  String @unique
  color String @default("#3B82F6")

  posts PostTag[]

  @@map("tags")
}

model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

model Banner {
  id          String  @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  linkUrl     String?
  order       Int     @default(0)
  active      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("banners")
}

model Marquee {
  id        String  @id @default(cuid())
  content   String
  linkUrl   String?
  order     Int     @default(0)
  active    Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("marquees")
}

model Navigation {
  id       String  @id @default(cuid())
  title    String
  href     String
  parentId String?
  order    Int     @default(0)
  active   Boolean @default(true)

  parent   Navigation?  @relation("NavigationHierarchy", fields: [parentId], references: [id])
  children Navigation[] @relation("NavigationHierarchy")

  @@map("navigations")
}

model Translation {
  id     String @id @default(cuid())
  key    String
  locale String
  value  String

  @@unique([key, locale])
  @@map("translations")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}